<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentSeperatorNotInsideFunctionDefault" xml:space="preserve">
    <value>There is an argument seperator not inside Log or Random.</value>
  </data>
  <data name="DecimalPointDefault" xml:space="preserve">
    <value>An element ends with, or contains multiple, decimal points.</value>
  </data>
  <data name="EIsNotAloneAsLogBaseDefault" xml:space="preserve">
    <value>When 'E' is used as log base, it must be alone.</value>
  </data>
  <data name="ExponentIsNotIntegerAfterParameter" xml:space="preserve">
    <value> is not an integer.</value>
  </data>
  <data name="ExponentIsNotIntegerBeforeParameter" xml:space="preserve">
    <value>The exponent </value>
  </data>
  <data name="ExponentIsNotIntegerDefault" xml:space="preserve">
    <value>An exponent is not an integer.</value>
  </data>
  <data name="ExponentTooLargeOrSmallAfterParameter" xml:space="preserve">
    <value> is too large or small. Maximum size is  ±307.</value>
  </data>
  <data name="ExponentTooLargeOrSmallBeforeParameter" xml:space="preserve">
    <value>The exponent </value>
  </data>
  <data name="ExponentTooLargeOrSmallDefault" xml:space="preserve">
    <value>An exponent is too large or small. Maximum size is ±307.</value>
  </data>
  <data name="FirstElementInvalidAfterParameter" xml:space="preserve">
    <value>, is invalid.</value>
  </data>
  <data name="FirstElementInvalidBeforeParameter" xml:space="preserve">
    <value>The first element, </value>
  </data>
  <data name="FirstElementInvalidDefault" xml:space="preserve">
    <value>The first element is invalid.</value>
  </data>
  <data name="FoundClosingBracketWithoutOpeningBracket" xml:space="preserve">
    <value>A closing bracket was found without an equivalent opening bracket.</value>
  </data>
  <data name="FunctionNotFollowedByOpeningBracket" xml:space="preserve">
    <value>Functions must be followed by an opening bracket.</value>
  </data>
  <data name="InvalidCharacterAfterFactorialAfterParameter" xml:space="preserve">
    <value> is invalid when used after factorial.</value>
  </data>
  <data name="InvalidCharacterAfterFactorialBeforeParameter" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidCharacterAfterFactorialDefault" xml:space="preserve">
    <value>Only operators and brackets may follow factorial.</value>
  </data>
  <data name="InvalidCharacterBeforeArgumentSeparatorAfterParameter" xml:space="preserve">
    <value> is invalid before the argument separator.</value>
  </data>
  <data name="InvalidCharacterBeforeArgumentSeparatorBeforeParameter" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidCharacterBeforeArgumentSeparatorDefault" xml:space="preserve">
    <value>Only numbers and closing brackets can appear before the argument separator. (Seperating the numbers in Log and Random.)</value>
  </data>
  <data name="InvalidCharacterBeforeFactorialAfterParameter" xml:space="preserve">
    <value> is invalid when used before factorial.</value>
  </data>
  <data name="InvalidCharacterBeforeFactorialBeforeParameter" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidCharacterBeforeFactorialDefault" xml:space="preserve">
    <value>Only numbers and closing brackets can appear before factorial.</value>
  </data>
  <data name="InvalidElementAfterEAfterParameter" xml:space="preserve">
    <value> is invalid when used after E.</value>
  </data>
  <data name="InvalidElementAfterEBeforeParameter" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidElementAfterEDefault" xml:space="preserve">
    <value>There is an invalid element after E.</value>
  </data>
  <data name="InvalidOperatorOrderAfterParameters" xml:space="preserve">
    <value> cannot go together.</value>
  </data>
  <data name="InvalidOperatorOrderBeforeParameters" xml:space="preserve">
    <value />
  </data>
  <data name="InvalidOperatorOrderBetweenParameters" xml:space="preserve">
    <value> and </value>
  </data>
  <data name="InvalidOperatorOrderDefault" xml:space="preserve">
    <value>There are two operators in a row which cannot go together.</value>
  </data>
  <data name="LastElementInvalidAfterParameter" xml:space="preserve">
    <value>, is invalid.</value>
  </data>
  <data name="LastElementInvalidBeforeParameter" xml:space="preserve">
    <value>The last element,</value>
  </data>
  <data name="LastElementInvalidDefault" xml:space="preserve">
    <value>The last element is invalid.</value>
  </data>
  <data name="NoArgumentSeparatorAftetrParameter" xml:space="preserve">
    <value> into two numbers.</value>
  </data>
  <data name="NoArgumentSeparatorBeforeParameter" xml:space="preserve">
    <value>An argument separator is missing in Log or Random. Unable to separate </value>
  </data>
  <data name="NoArgumentSeparatorDefault" xml:space="preserve">
    <value>There must be an argument separator to separate the numbers in Log and Random.</value>
  </data>
  <data name="NoEquationDefault" xml:space="preserve">
    <value>Enter an equation.</value>
  </data>
  <data name="NotAllOpeningBracketsClosedDefault" xml:space="preserve">
    <value>Not all opening brackets have been closed.</value>
  </data>
  <data name="SeparationFailedDefault" xml:space="preserve">
    <value>Failed to correctly separate the equation into elements.</value>
  </data>
  <data name="UndeterminedUseOfEDefault" xml:space="preserve">
    <value>Cannot determine whether an 'E' is *10^ or Euler's Number (2.718 to 3dp).</value>
  </data>
  <data name="UnidentifiableElementAfterParameter" xml:space="preserve">
    <value>". An operator may be missing between two words or a word and number.</value>
  </data>
  <data name="UnidentifiableElementBeforeParameter" xml:space="preserve">
    <value>Cannot recognize "</value>
  </data>
  <data name="UnidentifiableElementDefault" xml:space="preserve">
    <value>Cannot recognize something in the equation. An operator may be missing between two words or a word and number.</value>
  </data>
</root>